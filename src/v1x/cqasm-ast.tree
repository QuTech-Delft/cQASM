# Implementation for the abstract syntax tree node classes.
source

# Header file for the abstract syntax tree node classes.
header "v1x/cqasm-ast-gen.hpp"

// Include tree base classes.
include "cqasm-tree.hpp"
tree_namespace cqasm::tree

// Include primitive types.
include "v1x/cqasm-primitives.hpp"
import cqasm.v1x.primitives

// Initialization function to use to construct default values for the tree base
// classes and primitives.
initialize_function cqasm::v1x::primitives::initialize
serdes_functions cqasm::v1x::primitives::serialize cqasm::v1x::primitives::deserialize

// Include SourceLocation annotation object for the debug dump generator.
src_include "cqasm-annotations.hpp"
location cqasm::annotations::SourceLocation

# Namespace for the abstract syntax tree node classes.
namespace cqasm
namespace v1x
namespace ast

# Any kind of expression.
expression {

    # An integer literal.
    integer_literal {

        # The integer.
        value: cqasm::v1x::primitives::Int;

    }

    # A floating point literal.
    float_literal {

        # The floating point number.
        value: cqasm::v1x::primitives::Real;

    }

    # An identifier.
    identifier {

        # The identifier.
        name: cqasm::v1x::primitives::Str;

    }

    # Represents a matrix literal. An empty matrix is defined to have one row
    # with zero elements. Arrays are represented as a matrix with one row.
    # Row vs column vectors are different by syntax, depending on whether
    # comma separation vs newline/semicolon is respectively used. While the
    # AST allows a different number of elements for each row, this is illegal;
    # it is caught at parse-time.
    matrix_literal {

        # The list of rows in the matrix.
        rows: Many<expression_list>;

    }

    # Represents a string literal.
    string_literal {

        # The string literal.
        value: cqasm::v1x::primitives::Str;

    }

    # Represents a JSON literal.
    json_literal {

        # The JSON literal.
        value: cqasm::v1x::primitives::Str;

    }

    # A function call.
    function_call {

        # The name of the function.
        name: One<identifier>;

        # The function arguments.
        arguments: One<expression_list>;

    }

    # Indexation operator.
    index {

        # The expression being indexed.
        expr: One<expression>;

        # The list of indices.
        indices: One<index_list>;

    }

    # Any unary operator.
    unary_op {

        # The expression being operated on.
        expr: One<expression>;

        # Negation operator (two's complement).
        negate {}

        # Bitwise NOT (one's complement).
        bitwise_not {}

        # Logical/boolean NOT.
        logical_not {}

    }

    # Any binary operator.
    binary_op {

        # The left-hand side of the expression.
        lhs: One<expression>;

        # The right-hand side of the expression.
        rhs: One<expression>;

        # Arithmetic operators.
        arith_op {

            # Exponentiation operator.
            power {}

            # Multiplication operator.
            multiply {}

            # True division operator.
            divide {}

            # Integer division operator.
            int_divide {}

            # Modulo operator.
            modulo {}

            # Addition operator.
            add {}

            # Subtraction operator.
            subtract {}

        }

        # Shift operators.
        shift_op {

            # Shift-left operator.
            shift_left {}

            # Arithmetic/signed shift-right operator (shifts in sign).
            shift_right_arith {}

            # Logical/unsigned shift-right operator (shifts in zero).
            shift_right_logic {}

        }

        # Comparison operators.
        cmp_op {

            # Equality operator.
            cmp_eq {}

            # Inequality operator.
            cmp_ne {}

            # Greater-than operator.
            cmp_gt {}

            # Greater-than-or-equal operator.
            cmp_ge {}

            # Less-than operator.
            cmp_lt {}

            # Less-than-or-equal operator.
            cmp_le {}

        }

        # Bitwise operators.
        bitwise_op {

            # Bitwise AND operator.
            bitwise_and {}

            # Bitwise XOR operator.
            bitwise_xor {}

            # Bitwise OR operator.
            bitwise_or {}

        }

        # Logical operators.
        logical_op {

            # Logical AND operator.
            logical_and {}

            # Logical XOR operator.
            logical_xor {}

            # Logical OR operator.
            logical_or {}

        }

    }

    # Ternary conditional operator.
    ternary_cond {

        # The boolean condition for selection.
        cond: One<expression>;

        # The result if cond is true.
        if_true: One<expression>;

        # The result if cond is false.
        if_false: One<expression>;

    }

    # Placeholder for an expression with a parse error.
    erroneous_expression {
        error;
    }

}

# Represents a comma-separated list of expressions.
expression_list {

    # The list of expressions.
    items: Any<expression>;

}

# An entry in an index list. Can be a single index or a range.
index_entry {

    # A single index in an index list.
    index_item {

        # An integer expression representing the index.
        index: One<expression>;

    }

    # An inclusive range of indices in an index list.
    index_range {

        # An integer expression representing the first index.
        first: One<expression>;

        # An integer expression representing the last index.
        last: One<expression>;

    }

}

# A list of one or more indices.
index_list {

    # The list of indices.
    items: Many<index_entry>;

}

# Represents an annotation.
annotation_data {

    # The interface this annotation is intended for.
    # If a target doesn't support an interface, it should silently ignore the annotation.
    interface: One<identifier>;

    # The operation within the interface that this annotation is intended for.
    # If a target supports the corresponding interface but not the operation, it should throw an error.
    operation: One<identifier>;

    # Any operands attached to the annotation.
    operands: One<expression_list>;

}

# An assignment statement within a loop definition.
assignment {

    # Name of the variable being assigned.
    lhs: One<expression>;

    # Value being assigned to the variable.
    rhs: One<expression>;

}

# A single condition + block for use in an if-else chain.
if_else_branch {

    # The condition.
    condition: One<expression>;

    # The body.
    body: One<statement_list>;

}

# Represents a node that carries annotation data.
annotated {

    # Zero or more annotations attached to this object.
    annotations: Any<annotation_data>;

    # Any kind of instruction.
    # Note that this is NOT a statement.
    # Instructions are always considered part of a parallel bundle, even if they're on their own.
    instruction {

        # Name identifying the instruction.
        name: One<identifier>;

        # Optional conditional expression.
        condition: Maybe<expression>;

        # Operands for the instruction.
        operands: One<expression_list>;

    }

    # Any kind of statement.
    statement {

        # A list of parallel instructions.
        bundle {

            # The list of parallel instructions.
            items: Many<instruction>;

        }

        # A mapping (alias) for an expression.
        # Originally just a way of naming a single qubit.
        mapping {

            # The identifier used to refer to the expression.
            alias: One<identifier>;

            # The aliased expression.
            expr: One<expression>;

        }

        # One or more variable declarations of some type.
        variables {

            # Name of the variables. Multiple can be declared on one line.
            names: Many<identifier>;

            # Name of the type.
            typ: One<identifier>;

        }

        # A subcircuit header.
        subcircuit {

            # The name of the subcircuit.
            name: One<identifier>;

            # An optional integer expression representing the number of iterations for this subcircuit.
            iterations: Maybe<expression>;

        }

        # Any version 1.2+ structured control-flow statement.
        structured {

            # An if-else chain.
            if_else {

                # The if-else branches.
                branches: Many<if_else_branch>;

                # The final else block, if any.
                otherwise: Maybe<statement_list>;

            }

            # A C-style for loop.
            for_loop {

                # The optional initializing assignment, run before the loop starts.
                initialize: Maybe<assignment>;

                # The condition for starting another iteration.
                condition: One<expression>;

                # The updating assignment, done at the end of the loop body and upon continue.
                update: Maybe<assignment>;

                # The loop body.
                body: One<statement_list>;

            }

            # A foreach loop.
            # Note that this is rather dumbed-down in cQASM 1.2 compared to the cQASM 2.0 syntax it was inspired from,
            # and is only usable as a range-based loop.
            foreach_loop {

                # Reference to the variable used for looping.
                lhs: One<expression>;

                # The first value.
                frm: One<expression>;

                # The last value.
                to: One<expression>;

                # The loop body.
                body: One<statement_list>;

            }

            # A while loop.
            while_loop {

                # The condition for starting another iteration.
                condition: One<expression>;

                # The loop body.
                body: One<statement_list>;

            }

            # A repeat-until loop.
            repeat_until_loop {

                # The loop body.
                body: One<statement_list>;

                # The condition for stopping iteration.
                condition: One<expression>;

            }

            # A break statement.
            break_statement {}

            # A continue statement.
            continue_statement {}

        }

        # Placeholder for a statement with a parse error.
        erroneous_statement {
            error;
        }

    }

}

# A list of statements.
statement_list {

    # The list of statements.
    items: Any<statement>;

}

# The file version identifier.
version {

    # The list of version components, ordered major to minor.
    items: cqasm::v1x::primitives::Version;

}

# Any root node for the AST.
root {

    # A complete program.
    program {

        # File version.
        version: One<version>;

        # Integer expression indicating the number of qubits.
        num_qubits: Maybe<expression>;

        # The statement list.
        statements: One<statement_list>;

    }

    # Placeholder for a program with a parse error.
    erroneous_program {
        error;
    }

}
