#include "generator.hpp"

#include <stdexcept>  // invalid_argument, runtime_error


/**
 * Namespace for the \ref func-gen program.
 */
namespace func_gen {

/**
 * Generates the function that registers the default functions in a FunctionTable.
 */
void Generator::generate_register_default_functions_into() {
    header_ofs_ << R"(
/**
 * Registers a bunch of functions usable during constant propagation into the given function table.
 */
void register_default_functions_into(resolver::FunctionTable &table);
)";
    source_ofs_ << R"(
/**
 * Registers a bunch of functions usable during constant propagation into the given function table.
 */
void register_default_functions_into(resolver::FunctionTable &table) {
)";
    for (const auto &func : funcs_) {
        source_ofs_ << "    table.add(";
        source_ofs_ << "\"" << func.cqasm_name << "\", ";
        source_ofs_ << "types::from_spec(\"" << func.cqasm_args << "\"), ";
        source_ofs_ << func.cpp_name;
        source_ofs_ << ");\n";
    }
    source_ofs_ << "}\n";
}

/**
 * Generates the function header in both the header and source file.
 * The start of the function body must follow.
 * This also registers the function to be added to the function that populates FunctionTables.
 */
void Generator::generate_impl_header(const Function &func) {
    auto proto = "values::Value " + func.cpp_name + "(const values::Values &v)";
    header_ofs_ << proto << ";\n";
    source_ofs_ << "\n" << proto << " {\n";
    funcs_.push_back(func);
}

/**
 * Generates a basic constant scalar function, such as integer addition for instance.
 * name must be the cQASM name for the function (either just the function name or operator+ etc),
 * return_type must be the return type code,
 * arg_types must be the argument type codes, and
 * impl must be a C++ expression implementing the function,
 * operating on variables a..z representing the arguments, and
 * returning the primitive value associated with return_type.
 */
void Generator::generate_const_scalar_op(
    const std::string &name,
    const char return_type,
    const std::string &arg_types,
    const std::string &impl
) {
    generate_const_impl_header(Function(name, arg_types));
    generate_impl_footer(impl, return_type);
}

/**
 * Constructs a generator for the function table.
 */
Generator::Generator(
    const std::string &header_filename,
    const std::string &source_filename,
    std::string_view version
) :
    funcs_{},
    header_ofs_{ header_filename },
    source_ofs_{ source_filename },
    version_{ version }
{
    // Check that the files were opened properly.
    if (!header_ofs_.is_open()) {
        throw std::runtime_error("failed to open header file");
    }
    if (!source_ofs_.is_open()) {
        throw std::runtime_error("failed to open source file");
    }

    // Print the headers for the header and source files.
    auto pos = header_filename.rfind('/');
    auto header_name = (pos == header_filename.npos) ? header_filename : header_filename.substr(pos + 1);
    header_ofs_ << R"(
/** \file
 * Header file generated by \ref func-gen.
 */

#pragma once

#include ")" << version_ << R"(/cqasm-resolver.hpp"

namespace cqasm {
namespace )" << version_ << R"( {
namespace functions {

)";
    source_ofs_ << R"(
/** \file
 * Source file generated by \ref func-gen.
 */

#include <cmath>
#include <complex>
#include ")" << version_ << R"(/)" << header_name << R"("

namespace cqasm {
namespace )" << version_ << R"( {

/**
 * Namespace for the functions generated by \ref func-gen.
 */
namespace functions {

/**
 * Modulo.
 */
static int64_t mod_floor(int64_t a, int64_t b) {
    int64_t rem = a % b;
    if (rem != 0 && ((rem < 0) != (b < 0))) {
        rem += b;
    }
    return rem;
}
)";
}

/**
 * Finishes writing the header & source file, then destroys the generator.
 */
Generator::~Generator() {
    generate_register_default_functions_into();
    auto footer = R"(
} // namespace functions
} // namespace )" + version_ + R"(
} // namespace cqasm
)";
    source_ofs_ << footer;
    header_ofs_ << footer;
}

} // namespace func_gen
