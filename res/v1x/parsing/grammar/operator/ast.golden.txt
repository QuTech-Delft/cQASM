SUCCESS
Program( # input.cq:1:1..11:1
  version: <
    Version( # input.cq:1:9..12
      items: 1.0
    )
  >
  num_qubits: <
    IntegerLiteral( # input.cq:2:8..10
      value: 10
    )
  >
  statements: <
    StatementList( # input.cq:2:10..11:1
      items: [
        Bundle( # input.cq:4:1..117
          items: [
            Instruction( # input.cq:4:1..117
              name: <
                Identifier( # input.cq:4:1..8
                  name: display
                )
              >
              condition: -
              operands: <
                ExpressionList(
                  items: []
                )
              >
              annotations: [
                AnnotationData( # input.cq:4:10..117
                  interface: <
                    Identifier( # input.cq:4:10..14
                      name: test
                    )
                  >
                  operation: <
                    Identifier( # input.cq:4:15..19
                      name: test
                    )
                  >
                  operands: <
                    ExpressionList( # input.cq:4:20..105
                      items: [
                        Subtract( # input.cq:4:20..42
                          lhs: <
                            Add( # input.cq:4:20..35
                              lhs: <
                                Subtract( # input.cq:4:20..29
                                  lhs: <
                                    Add( # input.cq:4:20..25
                                      lhs: <
                                        IntegerLiteral( # input.cq:4:20..21
                                          value: 1
                                        )
                                      >
                                      rhs: <
                                        IntegerLiteral( # input.cq:4:24..25
                                          value: 2
                                        )
                                      >
                                    )
                                  >
                                  rhs: <
                                    IntegerLiteral( # input.cq:4:28..29
                                      value: 4
                                    )
                                  >
                                )
                              >
                              rhs: <
                                Negate( # input.cq:4:32..35
                                  expr: <
                                    IntegerLiteral( # input.cq:4:34..35
                                      value: 8
                                    )
                                  >
                                )
                              >
                            )
                          >
                          rhs: <
                            Negate( # input.cq:4:38..42
                              expr: <
                                IntegerLiteral( # input.cq:4:40..42
                                  value: 16
                                )
                              >
                            )
                          >
                        )
                        Subtract( # input.cq:4:54..78
                          lhs: <
                            Multiply( # input.cq:4:54..70
                              lhs: <
                                Divide( # input.cq:4:54..64
                                  lhs: <
                                    IntegerLiteral( # input.cq:4:54..55
                                      value: 1
                                    )
                                  >
                                  rhs: <
                                    Power( # input.cq:4:58..64
                                      lhs: <
                                        IntegerLiteral( # input.cq:4:58..59
                                          value: 2
                                        )
                                      >
                                      rhs: <
                                        IntegerLiteral( # input.cq:4:63..64
                                          value: 3
                                        )
                                      >
                                    )
                                  >
                                )
                              >
                              rhs: <
                                Negate( # input.cq:4:67..70
                                  expr: <
                                    IntegerLiteral( # input.cq:4:69..70
                                      value: 4
                                    )
                                  >
                                )
                              >
                            )
                          >
                          rhs: <
                            Multiply( # input.cq:4:73..78
                              lhs: <
                                IntegerLiteral( # input.cq:4:73..74
                                  value: 5
                                )
                              >
                              rhs: <
                                IntegerLiteral( # input.cq:4:77..78
                                  value: 6
                                )
                              >
                            )
                          >
                        )
                        Multiply( # input.cq:4:94..105
                          lhs: <
                            IntegerLiteral( # input.cq:4:94..95
                              value: 2
                            )
                          >
                          rhs: <
                            Add( # input.cq:4:98..105
                              lhs: <
                                IntegerLiteral( # input.cq:4:99..100
                                  value: 3
                                )
                              >
                              rhs: <
                                IntegerLiteral( # input.cq:4:103..104
                                  value: 4
                                )
                              >
                            )
                          >
                        )
                      ]
                    )
                  >
                )
              ]
            )
          ]
          annotations: []
        )
        Bundle( # input.cq:6:1..127
          items: [
            Instruction( # input.cq:6:1..127
              name: <
                Identifier( # input.cq:6:1..8
                  name: display
                )
              >
              condition: -
              operands: <
                ExpressionList(
                  items: []
                )
              >
              annotations: [
                AnnotationData( # input.cq:6:10..127
                  interface: <
                    Identifier( # input.cq:6:10..14
                      name: test
                    )
                  >
                  operation: <
                    Identifier( # input.cq:6:15..19
                      name: test
                    )
                  >
                  operands: <
                    ExpressionList( # input.cq:6:20..114
                      items: [
                        TernaryCond( # input.cq:6:20..60
                          cond: <
                            LogicalOr( # input.cq:6:20..50
                              lhs: <
                                Identifier( # input.cq:6:20..24
                                  name: true
                                )
                              >
                              rhs: <
                                LogicalXor( # input.cq:6:28..50
                                  lhs: <
                                    Identifier( # input.cq:6:28..32
                                      name: true
                                    )
                                  >
                                  rhs: <
                                    LogicalAnd( # input.cq:6:36..50
                                      lhs: <
                                        LogicalNot( # input.cq:6:36..42
                                          expr: <
                                            Identifier( # input.cq:6:37..42
                                              name: false
                                            )
                                          >
                                        )
                                      >
                                      rhs: <
                                        Identifier( # input.cq:6:46..50
                                          name: true
                                        )
                                      >
                                    )
                                  >
                                )
                              >
                            )
                          >
                          if_true: <
                            IntegerLiteral( # input.cq:6:53..55
                              value: 10
                            )
                          >
                          if_false: <
                            IntegerLiteral( # input.cq:6:58..60
                              value: 20
                            )
                          >
                        )
                        CmpEq( # input.cq:6:71..86
                          lhs: <
                            CmpLe( # input.cq:6:71..77
                              lhs: <
                                IntegerLiteral( # input.cq:6:71..72
                                  value: 1
                                )
                              >
                              rhs: <
                                IntegerLiteral( # input.cq:6:76..77
                                  value: 2
                                )
                              >
                            )
                          >
                          rhs: <
                            CmpLt( # input.cq:6:81..86
                              lhs: <
                                IntegerLiteral( # input.cq:6:81..82
                                  value: 3
                                )
                              >
                              rhs: <
                                IntegerLiteral( # input.cq:6:85..86
                                  value: 4
                                )
                              >
                            )
                          >
                        )
                        CmpNe( # input.cq:6:99..114
                          lhs: <
                            CmpGe( # input.cq:6:99..105
                              lhs: <
                                IntegerLiteral( # input.cq:6:99..100
                                  value: 4
                                )
                              >
                              rhs: <
                                IntegerLiteral( # input.cq:6:104..105
                                  value: 3
                                )
                              >
                            )
                          >
                          rhs: <
                            CmpGt( # input.cq:6:109..114
                              lhs: <
                                IntegerLiteral( # input.cq:6:109..110
                                  value: 2
                                )
                              >
                              rhs: <
                                IntegerLiteral( # input.cq:6:113..114
                                  value: 1
                                )
                              >
                            )
                          >
                        )
                      ]
                    )
                  >
                )
              ]
            )
          ]
          annotations: []
        )
        Bundle( # input.cq:8:1..148
          items: [
            Instruction( # input.cq:8:1..148
              name: <
                Identifier( # input.cq:8:1..8
                  name: display
                )
              >
              condition: -
              operands: <
                ExpressionList(
                  items: []
                )
              >
              annotations: [
                AnnotationData( # input.cq:8:10..148
                  interface: <
                    Identifier( # input.cq:8:10..14
                      name: test
                    )
                  >
                  operation: <
                    Identifier( # input.cq:8:15..19
                      name: test
                    )
                  >
                  operands: <
                    ExpressionList( # input.cq:8:20..102
                      items: [
                        Modulo( # input.cq:8:20..26
                          lhs: <
                            Negate( # input.cq:8:20..22
                              expr: <
                                IntegerLiteral( # input.cq:8:21..22
                                  value: 2
                                )
                              >
                            )
                          >
                          rhs: <
                            IntegerLiteral( # input.cq:8:25..26
                              value: 3
                            )
                          >
                        )
                        IntDivide( # input.cq:8:38..45
                          lhs: <
                            Negate( # input.cq:8:38..40
                              expr: <
                                IntegerLiteral( # input.cq:8:39..40
                                  value: 2
                                )
                              >
                            )
                          >
                          rhs: <
                            IntegerLiteral( # input.cq:8:44..45
                              value: 3
                            )
                          >
                        )
                        ShiftLeft( # input.cq:8:58..64
                          lhs: <
                            IntegerLiteral( # input.cq:8:58..59
                              value: 1
                            )
                          >
                          rhs: <
                            IntegerLiteral( # input.cq:8:63..64
                              value: 2
                            )
                          >
                        )
                        ShiftRightArith( # input.cq:8:75..82
                          lhs: <
                            Negate( # input.cq:8:75..77
                              expr: <
                                IntegerLiteral( # input.cq:8:76..77
                                  value: 8
                                )
                              >
                            )
                          >
                          rhs: <
                            IntegerLiteral( # input.cq:8:81..82
                              value: 2
                            )
                          >
                        )
                        ShiftRightLogic( # input.cq:8:94..102
                          lhs: <
                            Negate( # input.cq:8:94..96
                              expr: <
                                IntegerLiteral( # input.cq:8:95..96
                                  value: 8
                                )
                              >
                            )
                          >
                          rhs: <
                            IntegerLiteral( # input.cq:8:101..102
                              value: 2
                            )
                          >
                        )
                      ]
                    )
                  >
                )
              ]
            )
          ]
          annotations: []
        )
        Bundle( # input.cq:10:1..57
          items: [
            Instruction( # input.cq:10:1..57
              name: <
                Identifier( # input.cq:10:1..8
                  name: display
                )
              >
              condition: -
              operands: <
                ExpressionList(
                  items: []
                )
              >
              annotations: [
                AnnotationData( # input.cq:10:10..57
                  interface: <
                    Identifier( # input.cq:10:10..14
                      name: test
                    )
                  >
                  operation: <
                    Identifier( # input.cq:10:15..19
                      name: test
                    )
                  >
                  operands: <
                    ExpressionList( # input.cq:10:20..46
                      items: [
                        BitwiseNot( # input.cq:10:20..23
                          expr: <
                            Negate( # input.cq:10:21..23
                              expr: <
                                IntegerLiteral( # input.cq:10:22..23
                                  value: 2
                                )
                              >
                            )
                          >
                        )
                        BitwiseOr( # input.cq:10:33..46
                          lhs: <
                            IntegerLiteral( # input.cq:10:33..34
                              value: 1
                            )
                          >
                          rhs: <
                            BitwiseXor( # input.cq:10:37..46
                              lhs: <
                                IntegerLiteral( # input.cq:10:37..38
                                  value: 2
                                )
                              >
                              rhs: <
                                BitwiseAnd( # input.cq:10:41..46
                                  lhs: <
                                    IntegerLiteral( # input.cq:10:41..42
                                      value: 3
                                    )
                                  >
                                  rhs: <
                                    IntegerLiteral( # input.cq:10:45..46
                                      value: 2
                                    )
                                  >
                                )
                              >
                            )
                          >
                        )
                      ]
                    )
                  >
                )
              ]
            )
          ]
          annotations: []
        )
      ]
    )
  >
)

